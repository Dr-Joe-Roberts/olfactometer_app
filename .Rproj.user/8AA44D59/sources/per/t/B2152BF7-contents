library(shiny)
library(dplyr)
library(lubridate)

# Helper function to format time as MM:SS
format_duration <- function(seconds) {
  mins <- floor(seconds / 60)
  secs <- round(seconds %% 60)
  sprintf("%02d:%02d", mins, secs)
}

# Define UI
ui <- fluidPage(
  # JavaScript to manage key presses
  tags$script(HTML("
    function attachKeyListener() {
      document.addEventListener('keydown', keyListener);
    }
    function detachKeyListener() {
      document.removeEventListener('keydown', keyListener);
    }
    function keyListener(event) {
      if(['1', '2', '3', '4', '5'].includes(event.key)) {
        Shiny.onInputChange('key', event.key);
      } else {
        alert('Invalid key! Please press a key between 1 and 5.');
      }
    }
    Shiny.addCustomMessageHandler('attachKeyListener', function(message) {
      attachKeyListener();
    });
    Shiny.addCustomMessageHandler('detachKeyListener', function(message) {
      detachKeyListener();
    });
  ")),
  # Include custom CSS for styling
  includeCSS("custom.css"),
  # Header elements
  tags$head(
    # Include Google font
    tags$link(rel = 'stylesheet', type = 'text/css', href = 'https://fonts.googleapis.com/css?family=Montserrat&display=swap'),
    # Include favicon (if you have one)
    tags$link(rel = 'icon', type = 'image/png', href = 'HAU-shield.png')
  ),
  # Title panel
  titlePanel(
    # Title panel content
    title = tags$div(
      class = "title-panel",
      # Main container
      tags$div(
        class = "main-container",
        # Left side: title, version, and subtitle
        tags$div(
          class = "left-side",
          tags$div(
            tags$span("olfactometeR", class = "left-side-title")
          ),
          tags$div(
            tags$span("An App to Quantify Insect Behaviour in Olfactometer Bioassays", class = "left-side-subtitle")
          )
        ),
        # Right side: logos
        tags$div(
          class = "right-side",
          # Harper Adams logo with padding
          tags$a(
            href = 'https://www.harper-adams.ac.uk/',
            tags$img(
              src = 'HAU.png',  
              height = 70,
              width = 215
            ),
            target = '_blank',
            class = 'right-side-logo'
          )
        )
      )
    ),
    # Window title for the browser tab
    windowTitle = 'Insect Olfactometer Data Collection'
  ),
  sidebarLayout(
    sidebarPanel(
      width = 3, # Adjusting the width for better laptop screen usability
      h3("Zone Assignments", class = "large-text"),
      fluidRow(
        column(4, tags$span("Zone 1", class = "zone-key"),
               tags$div("Key 1", align = "left", class = "key-label")),
        column(8, textInput("zone1_odour", "Odour Source:", value = ""))
      ),
      fluidRow(
        column(4, tags$span("Zone 2", class = "zone-key"),
               tags$div("Key 2", align = "left", class = "key-label")),
        column(8, textInput("zone2_odour", "Odour Source:", value = ""))
      ),
      fluidRow(
        column(4, tags$span("Zone 3", class = "zone-key"),
               tags$div("Key 3", align = "left", class = "key-label")),
        column(8, textInput("zone3_odour", "Odour Source:", value = ""))
      ),
      fluidRow(
        column(4, tags$span("Zone 4", class = "zone-key"),
               tags$div("Key 4", align = "left", class = "key-label")),
        column(8, textInput("zone4_odour", "Odour Source:", value = ""))
      ),
      fluidRow(
        column(4, tags$span("Zone 5", class = "zone-key"),
               tags$div("Key 5", align = "left", class = "key-label")),
        column(8, textInput("zone5_odour", "Center:", value = "Center"))
      ),
      textInput("trial_number", "Trial Number", value = "1")
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Trial",
                 h3("Trial Status"),
                 fluidRow(
                   column(6, h4("Current Zone"), verbatimTextOutput("current_zone")),
                   column(6, h4("Trial Timer"), verbatimTextOutput("trial_timer"))
                 ),
                 fluidRow(
                   class = "centered-buttons",
                   column(2, actionButton("start", "Start Recording", class = "btn btn-start")),
                   column(2, actionButton("stop", "Stop Recording", class = "btn btn-stop")),
                   column(2, actionButton("reset_trial", "Reset Trial", class = "btn btn-reset")),
                   column(2, actionButton("add_trial", "Add New Trial", class = "btn btn-add")),
                   column(2, downloadButton("downloadData", "Download Data as CSV", class = "btn btn-download"))
                 ),
                 tags$br(), tags$br(),
                 h3("Trial Summary"),
                 tableOutput("zone_times")
        ),
        tabPanel("Instructions",
                 htmlOutput("instructions")
        ),
        tabPanel("Best Practices",
                 h3("Best Practices for Insect Olfactometer Bioassays"),
                 htmlOutput("introduction"),
                 tableOutput("best_practices")
        )
      )
    )
  ),
  tags$footer(
    class = "footer",
    HTML("&copy; Joe Roberts and Ben Clunie 2024")
  )
)

# Define server logic
server <- function(input, output, session) {
  zones <- reactiveValues(
    current_zone = "Zone 5",
    start_time = NULL,
    times = data.frame(
      Zone = character(0),
      Duration = numeric(0),
      Count = integer(0),
      Odour_Source = character(0),
      Trial = character(0),
      stringsAsFactors = FALSE
    ),
    all_times = data.frame(
      Zone = character(0),
      Duration = numeric(0),
      Count = integer(0),
      Odour_Source = character(0),
      Trial = character(0),
      stringsAsFactors = FALSE
    ),
    trial_start = NULL,
    trial_running = FALSE,
    elapsed_time = 0,
    total_elapsed_time = 0
  )
  
  observeEvent(input$start, {
    # Set default odour sources if they are empty
    if (input$zone1_odour == "") updateTextInput(session, "zone1_odour", value = "Odour A")
    if (input$zone2_odour == "") updateTextInput(session, "zone2_odour", value = "Odour B")
    if (input$zone3_odour == "") updateTextInput(session, "zone3_odour", value = "Odour C")
    if (input$zone4_odour == "") updateTextInput(session, "zone4_odour", value = "Odour D")
    
    zones$start_time <- Sys.time()
    if (is.null(zones$trial_start)) {
      zones$trial_start <- Sys.time()
    }
    zones$trial_running <- TRUE
    session$sendCustomMessage(type = "attachKeyListener", message = list())
  })
  
  observeEvent(input$stop, {
    if (!is.null(zones$current_zone) && !is.null(zones$start_time)) {
      duration <- difftime(Sys.time(), zones$start_time, units = "secs")
      odour_source <- switch(zones$current_zone,
                             "Zone 1" = input$zone1_odour,
                             "Zone 2" = input$zone2_odour,
                             "Zone 3" = input$zone3_odour,
                             "Zone 4" = input$zone4_odour,
                             "Zone 5" = input$zone5_odour)
      zones$times <- zones$times %>%
        add_row(Zone = zones$current_zone, Duration = as.numeric(duration), Count = 1, Odour_Source = odour_source, Trial = input$trial_number)
      zones$total_elapsed_time <- zones$total_elapsed_time + as.numeric(duration)
    }
    zones$current_zone <- NULL
    zones$trial_running <- FALSE
    zones$start_time <- NULL
    session$sendCustomMessage(type = "detachKeyListener", message = list())
  })
  
  observeEvent(input$add_trial, {
    zones$all_times <- bind_rows(zones$all_times, zones$times)
    zones$current_zone <- "Zone 5"
    zones$start_time <- NULL
    zones$times <- data.frame(
      Zone = character(0),
      Duration = numeric(0),
      Count = integer(0),
      Odour_Source = character(0),
      Trial = character(0),
      stringsAsFactors = FALSE
    )
    zones$trial_start <- NULL
    zones$elapsed_time <- 0
    zones$total_elapsed_time <- 0
    updateTextInput(session, "trial_number", value = as.character(as.numeric(input$trial_number) + 1))
  })
  
  observeEvent(input$reset_trial, {
    zones$current_zone <- "Zone 5"
    zones$start_time <- NULL
    zones$times <- data.frame(
      Zone = character(0),
      Duration = numeric(0),
      Count = integer(0),
      Odour_Source = character(0),
      Trial = character(0),
      stringsAsFactors = FALSE
    )
    zones$trial_start <- NULL
    zones$elapsed_time <- 0
    zones$total_elapsed_time <- 0
  })
  
  observeEvent(input$key, {
    if (zones$trial_running) {
      if (!is.null(zones$current_zone) && !is.null(zones$start_time)) {
        duration <- difftime(Sys.time(), zones$start_time, units = "secs")
        odour_source <- switch(zones$current_zone,
                               "Zone 1" = input$zone1_odour,
                               "Zone 2" = input$zone2_odour,
                               "Zone 3" = input$zone3_odour,
                               "Zone 4" = input$zone4_odour,
                               "Zone 5" = input$zone5_odour)
        zones$times <- zones$times %>%
          add_row(Zone = zones$current_zone, Duration = as.numeric(duration), Count = 1, Odour_Source = odour_source, Trial = input$trial_number)
        zones$total_elapsed_time <- zones$total_elapsed_time + as.numeric(duration)
      }
      zones$start_time <- Sys.time()
      zones$current_zone <- switch(input$key,
                                   `1` = "Zone 1",
                                   `2` = "Zone 2",
                                   `3` = "Zone 3",
                                   `4` = "Zone 4",
                                   `5` = "Zone 5",
                                   zones$current_zone
      )
    }
  })
  
  output$current_zone <- renderText({
    zones$current_zone
  })
  
  summarized_times <- reactive({
    zones$times %>%
      group_by(Trial, Zone, Odour_Source) %>%
      summarize(
        Total_Duration = sum(Duration),
        Total_Entries = n(),
        .groups = 'drop'
      ) %>%
      mutate(Total_Duration = sapply(Total_Duration, format_duration))
  })
  
  output$zone_times <- renderTable({
    summarized_times() %>%
      rename(
        "Trial" = Trial,
        "Zone" = Zone,
        "Odour Source" = Odour_Source,
        "Total Duration (MM:SS)" = Total_Duration,
        "Total Entries" = Total_Entries
      )
  })
  
  autoInvalidate <- reactiveTimer(1000)
  
  output$trial_timer <- renderText({
    autoInvalidate()
    if (zones$trial_running) {
      elapsed <- as.numeric(difftime(Sys.time(), zones$start_time, units = "secs")) + zones$total_elapsed_time
    } else {
      elapsed <- zones$total_elapsed_time
    }
    format_duration(elapsed)
  })
  
  output$downloadData <- downloadHandler(
    filename = function() {
      paste("olfactometer_data_", input$trial_number, "_", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      summarized_data <- bind_rows(zones$all_times, zones$times) %>%
        group_by(Trial, Zone, Odour_Source) %>%
        summarize(
          Total_Duration = sum(Duration),
          Total_Entries = n(),
          .groups = 'drop'
        ) %>%
        mutate(Total_Duration = sapply(Total_Duration, format_duration)) %>%
        select(Trial, Zone, Odour_Source, Total_Duration, Total_Entries)
      write.csv(summarized_data, file, row.names = FALSE)
    }
  )
  
  output$instructions <- renderUI({
    HTML('
      <h3>Overview</h3>
      <p>This Shiny web app is designed to help you collect data from an insect olfactometer trial. The app tracks the duration an insect spends in each zone of the olfactometer and records the number of entries into each zone. The recorded data can be downloaded as a CSV file.</p>
      <br>
      <h4>Steps to Use the App</h4>
      <ol>
        <li><b>Enter Trial Number and Odour Sources</b>:
          <p>In the respective input boxes, enter the trial number and the odour source for each zone (1 to 5). Zone 5 is defaulted to "Center". This information will be included in the filename of the downloaded CSV file and in the data.</p>
        </li>
        <li><b>Start Recording</b>:
          <p>Click the "Start Recording" button to begin the trial. The timer will start, and the initial zone will be set to Zone 5. The insect is introduced into Zone 5.</p>
        </li>
        <li><b>Record Zone Entries</b>:
          <p>Press the corresponding key (1, 2, 3, 4 or 5) on your keyboard to indicate that the insect has moved to a different zone. The app will record the duration spent in the previous zone and update the current zone.</p>
        </li>
        <li><b>Stop Recording</b>:
          <p>Click the "Stop Recording" button to stop the trial. The timer will stop, but the elapsed time will remain displayed. You can resume the trial by clicking the "Start Recording" button again, and the timer will continue from where it left off.</p>
        </li>
        <li><b>Add New Trial</b>:
          <p>Click the "Add New Trial" button to save the current trial data and start a new trial. This action will clear the results table and reset the elapsed time to zero for the new trial, but the data from the previous trials will be saved. The trial number will also increment by 1.</p>
        </li>
        <li><b>Reset Trial</b>:
          <p>Click the "Reset Trial" button to clear the current trial data without saving. This action will reset the results table and the elapsed time to zero for the current trial.</p>
        </li>
        <li><b>Download Data</b>:
          <p>Click the "Download Data as CSV" button to download the summarised data from all trials as a CSV file. The filename will include the trial number and the current date (e.g., olfactometer_data_1_2024-05-24.csv).</p>
      </ol>
      <br>
      <h4>Viewing the Data</h4>
      <p>The "Current Zone" section displays the current zone of the insect. The "Trial Timer" shows the elapsed time in MM:SS format. The table under "Trial Summary" summarises the total duration and the number of entries for each zone.</p>
    ')
  })
  
  output$introduction <- renderUI({
    HTML('
    <p>The following table summarises best practices for conducting insect olfactometer bioassays. These guidelines are based on the comprehensive review provided in the paper by <a href="https://doi.org/10.1111/eea.13351" target="_blank">Roberts et al. (2023)</a>, which outlines critical considerations to ensure the reliability and reproducibility of bioassay results.</p>
  <br>')
  })
  
  output$best_practices <- renderTable({
    best_practices <- data.frame(
      "Consideration" = c(
        "Olfactometer Design", 
        "Environment", 
        "Stimuli Presentation", 
        "Cleaning Procedures", 
        "Physiological State", 
        "Releasing Organisms"
      ),
      "Best Practices" = c(
        "Ensure the design suits the research question and species; use chemically inert materials; pilot test configurations.", 
        "Report and control temperature and humidity; use consistent lighting; minimise external stimuli.",
        "Avoid mechanical damage to biological materials; consider solvent properties for synthetic chemicals.",
        "Thoroughly clean between replicates; use fragrance-free detergents; appropriately clean or replace activated charcoal filters.",
        "Report and standardise the physiological state; account for time-of-day effects; use blocking in design and analysis.",
        "Decide between individual or group releases based on interaction and social behaviors; treat each group release as a single replicate."
      ),
      stringsAsFactors = FALSE
    )
    colnames(best_practices) <- c("Consideration", "Best Practices")
    best_practices
  })
}

# Run the application
shinyApp(ui = ui, server = server)
